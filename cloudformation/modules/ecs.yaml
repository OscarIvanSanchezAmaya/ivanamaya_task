AWSTemplateFormatVersion: 2010-09-09
Parameters:
  env:
    Type: String
  

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}

  cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub "${env}-cluster"
  taskdefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      ContainerDefinitions:
        - Name: !Sub "${env}-app"
          Image: 'public.ecr.aws/ecs-sample-image/amazon-ecs-sample:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
      Family: !Sub "${env}-task"
      Cpu: .25 vCPU
      Memory: 0.5 GB
      TaskRoleArn:
        Fn::ImportValue:
          !Sub "${env}-taskrole"
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub "${env}-taskrole"     

  service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${env}-service"
      TaskDefinition: !Ref taskdefinition
      Cluster: !Ref cluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
          - 
            Fn::ImportValue:
             !Sub "${env}-privatesubnet1"
          - 
            Fn::ImportValue:
              !Sub "${env}-privatesubnet2"
          SecurityGroups:
            -
              Fn::ImportValue:
                !Sub "${env}-privatesg"
      LoadBalancers:
      - TargetGroupArn:
          Fn::ImportValue:
            !Sub "${env}-targetgroup"
        ContainerPort: 80
        ContainerName: !Sub "${env}-app"

##autoscaling
  autoscalingtarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: service
    Properties:
      MinCapacity: 1
      MaxCapacity: 10
      ResourceId: !Join
        - '/'
        - - service
          - !Sub ${cluster}
          - !GetAtt service.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN:
        Fn::ImportValue:
          !Sub "${env}-taskrole"
#policys to scale up and down
  scaleup:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: autoscalingtarget
    Properties:
      PolicyName: !Sub '${service}scaleup'
      PolicyType: StepScaling
      ScalingTargetId: !Ref autoscalingtarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1
  scaledown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: autoscalingtarget
    Properties:
      PolicyName: !Sub '${service}ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref autoscalingtarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
#alarm
  AlarmHighRequests:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
      - scaleup
      - scaledown
    Properties:
      AlarmActions:
        - !Ref scaleup
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 2
      Dimensions:
        - Name: TargetGroup
          Value:
            Fn::ImportValue:
              !Sub "${env}-targetgroupfullname"
      EvaluationPeriods: 3
      MetricName: RequestCountPerTarget
      Namespace: AWS/ApplicationELB
      OKActions:
        - !Ref scaledown
      Period: 60
      Statistic: Sum
      Threshold: 10
      TreatMissingData: ignore

Outputs:
  cluster:
    Value: !Ref cluster
    Export:
      Name: !Sub "${env}-cluster"
  service:
    Value: !Ref service
    Export:
      Name: !Sub "${env}-service"
  servicename:
    Value: !GetAtt service.Name
    Export:
      Name: !Sub "${env}-servicename"