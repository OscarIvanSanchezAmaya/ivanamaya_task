AWSTemplateFormatVersion: 2010-09-09
Parameters:
  env:
    Type: String
  ip:
    Type: String
Resources:
#VPC
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub "${ip}.0.0/16"
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Sub "${env}-vpc"

#subnets
  privatesubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub "${ip}.0.0/24"
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: !Sub "${env}-privatesubnet1"
  privatesubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub "${ip}.1.0/24"
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: !Sub "${env}-privatesubnet2"
  publicsubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub "${ip}.2.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${env}-publicsubnet1"
  publicsubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref vpc
      CidrBlock: !Sub "${ip}.3.0/24"
      AvailabilityZone: "us-east-1b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${env}-publicsubnet2"



## internet gateway
  internetgateway:
    Type: AWS::EC2::InternetGateway
  
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref internetgateway
  
  routetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
  
  publicroute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref routetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetgateway
  
  publicassa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicsubnet1
      RouteTableId: !Ref routetable
  
  publicassb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicsubnet2
      RouteTableId: !Ref routetable
#private routetable and nat gateway
  nateipa:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  nateipb:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  natgatewaya:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt nateipa.AllocationId
      SubnetId: !Ref publicsubnet1
  natgatewayb:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt nateipb.AllocationId
      SubnetId: !Ref publicsubnet2

  privatetable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
  
  privatetable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
  
  privateroutea:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privatetable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natgatewaya
  privaterouteb:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privatetable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natgatewayb

  privateassa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privatesubnet1
      RouteTableId: !Ref privatetable1
  
  privateassb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privatesubnet2
      RouteTableId: !Ref privatetable2
#####ACL
  acl:
    Type: AWS::EC2::NetworkAcl
    Properties:
        VpcId: !Ref vpc
##inbound outbound rules
  InboundRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref acl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  InboundRule2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref acl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref acl
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
##attach ACL
  aclPrivatea:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref acl
      SubnetId: !Ref privatesubnet1
  aclprivateb:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref acl
      SubnetId: !Ref privatesubnet2
  aclpublica:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref acl
      SubnetId: !Ref publicsubnet1
  aclpublicb:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref acl
      SubnetId: !Ref publicsubnet2

Outputs:
  vpc:
    Value: !Ref vpc
    Export:
      Name: !Sub "${env}-vpc"
  privatesubnet1:
    Value: !Ref privatesubnet1

    Export:
      Name: !Sub "${env}-privatesubnet1"
  privatesubnet2:
    Value: !Ref privatesubnet2
    Export:
      Name: !Sub "${env}-privatesubnet2"
  publicsubnet1:
    Value: !Ref publicsubnet1
    Export:
      Name: !Sub "${env}-publicsubnet1"
  publicsubnet2:
    Value: !Ref publicsubnet2
    Export:
      Name: !Sub "${env}-publicsubnet2"